jpeg(filename=paste0(outDir, "/", group1, "_log_", xbins, ".jpg"), height=1400, width=1400)
print(p)
dev.off()
library(knitr)
library(knitr)
library(ggplot2)
library(knitr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(lubridate)
library(scales)
library(readr)
library(ggmap)
library(HLMdiag)
library(RColorBrewer)
library(gridExtra)
library(broom)
student2012.sub <- readRDS("../data/student_sub.rds")
student2012.sub %>% group_by(CNT) %>% tally()
grad <- read_csv("../data/graduate-programs.csv")
grad <- read_csv("../data/graduate-programs.csv")
head(grad[c(2,3,4,6)])
genes <- read_csv("../data/genes.csv")
melbtemp <- read.fwf("../data/ASN00086282.dly",
c(11, 4, 2, 4, rep(c(5, 1, 1, 1), 31)), fill=T)
melbtemp <- read.fwf("../data/ASN00086282.dly",
c(11, 4, 2, 4, rep(c(5, 1, 1, 1), 31)), fill=T)
head(melbtemp[,c(1,2,3,4,seq(5,100,4))])
pew <- read.delim(
file = "http://stat405.had.co.nz/data/pew.txt",
header = TRUE,
stringsAsFactors = FALSE,
check.names = F
)
data(french_fries, package = "reshape2")
head(french_fries, 4)
library(tidyr)
View(french_fries)
ff_long <- gather(french_fries, key = variable, value =
rating, potato:painty)
head(ff_long)
ff_long %>% ggplot(aes(x=rating)) + geom_histogram(binwidth=0.5) + facet_wrap(~variable)
ff.m <- french_fries %>%
gather(type, rating, -subject, -time, -treatment, -rep)
head(ff.m)
head(ff.m)
ggplot(data=ff.m, aes(x=rating)) + geom_histogram(binwidth=2) +
facet_wrap(~type, ncol=5)
??gather
billboard <- read.csv("../data/billboard.csv")
View(billboard)
long_billboard <- gather(billboard, key = week, value = rank, X1:X76)
long_billboard$week <- as.numeric(gsub("X", "", long_billboard$week))
ggplot(data=long_billboard) + geom_line(aes(x=week+lubridate::week(date.entered), y=rank, group=track, colour=artist)) + theme(legend.position="bottom")
head(genes)
View(genes)
gather(genes, variable, expr, -id)
genes %>%
gather(variable, expr, -id) %>%
separate(variable, c("trt", "leftover"), "-")
head(billboard)
head(genes)
?separate
?mutate
head(gtidy)
gtidy <- genes %>%
gather(variable, expr, -id) %>%
separate(variable, c("trt", "leftover"), "-") %>%
separate(leftover, c("time", "rep"), "\\.") %>%
mutate(trt = sub("W", "", trt)) %>%
mutate(rep = sub("R", "", rep))
head(genes)
head(gtidy)
gtidy %>% group_by(c(id, trt, time))
gtidy %>% group_by(id, trt, time)
gtidy %>% group_by(id, trt, time) %>% summarize(n = mean())
gtidy %>% group_by(id, trt, time) %>% summarize(mean = mean(n))
gtidy %>% group_by(id, trt, time) %>% summarize(mean = mean())
gtidy %>% group_by(id, trt, time) %>% summarize(mean = mean)
gtidy %>% group_by(id, trt, time) %>% summarize(expr = mean(expr))
gtidy %>% ggplot(aes(x=trt, y=expr, colour=time))
gtidy %>% ggplot(aes(x=trt, y=expr, colour=time)) + facet_wrap(~id)
gtidy %>% ggplot(aes(x=trt, y=expr, colour=time)) + facet_wrap(~id) + geom_point()
View(gtidy)
gtidy %>% ggplot(aes(x=trt, y=expr, colour=time)) + facet_wrap(~id) + geom_point()
?tally
head(autism)
autism_keep <- autism %>% group_by(childid) %>%
tally(sort=TRUE)
autism_keep
autism_keep <- autism %>% group_by(childid) %>%
tally(sort=TRUE) %>% filter(n>2)
autism_sub <- autism %>%
filter(childid %in% autism_keep$childid)
head(austim_sub)
head(autism_sub)
str(autism_sub)
head(autism_sub)
autism_lmer <- lmer(vsae ~ age2 + ( age2 - 1 | childid ),
data = autism_sub)
??lmer
library(lme4)
autism_lmer <- lmer(vsae ~ age2 + ( age2 - 1 | childid ),
data = autism_sub)
??augment
??broom::augment
head(autism_lmer)
autism_lmer <- lmer(vsae ~ age2 + ( age2 - 1 | childid ),
data = autism_sub)
autism_lmer <- lmer(vsae ~ age2 + ( age2 - 1 | childid ),
head(autism_lmer)
str(autism_lmer)
str(autism_sub)
autism_lmer_all <- augment(autism_lmer, autism_sub)
stR(autism_lmer_all)
str(autism_lmer_all)
glimpse(autism_lmer_all)
ggplot(autism_lmer_all, aes(x=.fitted, y=.fixed)) + geom_point()
head(autism_lmer_all)
ggplot(autism_lmer_all, aes(x=.fitted, y=.resid)) + geom_point()
ggplot(autism_lmer_all, aes(x=.fitted, y=.resid, colour=gender)) +
geom_point()
ggplot(autism_lmer_all, aes(x=.fitted, y=.resid, colour=gender)) + geom_point() + facet_wrap(~gender)
dev.off()
ggplot(autism_lmer_all, aes(x=.fitted, y=.resid, colour=gender)) + geom_point() + facet_wrap(~gender)
??augment
head(autism_lmer)
autism_lmer
str(autism_lmer)
glance(autism_lmer)
tidy(autism_lmer)
?broom
library(gapminder)
install.packages("gapminder")
install.packages("gapminder",repos='http://cran.us.r-project.org')
library(gapminder)
data(soybean_cn)
soybean_cn <- soybean_cn[,1:7]
library(bigPint)
data(soybean_cn)
soybean_cn <- soybean_cn[,1:7]
data=soybean_cn
outDir=getwd()
xbins=10
maxVal = max(abs(data[,-1]))
maxRange = c(-1*maxVal, maxVal)
buffer = 4*maxRange[2]/xbins
data=data[,-1]
colnames(data)
x = data[,c("S1.1")]
y = data[,c("S1.2")]
data=soybean_cn
my_fn <- function(data, mapping, ...){
x = data[,c(as.character(mapping$x))]
y = data[,c(as.character(mapping$y))]
h <- hexbin(x=x, y=y, xbins=xbins, shape=1, IDs=TRUE, xbnds=maxRange, ybnds=maxRange)
hexdf <- data.frame (hcell2xy (h),  hexID = h@cell, counts = h@count)
attr(hexdf, "cID") <- h@cID
p <- ggplot(hexdf, aes(x=x, y=y, fill = counts, hexID=hexID)) + geom_hex(stat="identity") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_cartesian(xlim = c(-0.5, maxRange[2]+buffer), ylim = c(-0.5, maxRange[2]+buffer))
p
}
p <- ggpairs(data[,-1], lower = list(continuous = my_fn))
library(GGally)
p <- ggpairs(data[,-1], lower = list(continuous = my_fn))
ggplotly(p)
library(plotly)
ggplotly(p)
library(hexbin)
ggplotly(p)
dev.off()
dev.off()
data=data[,-1]
x=data[,c("S1.1")]
y=data[,c("S1.2")]
str(x)
str(y)
h <- hexbin(x=x, y=y, xbins=xbins, shape=1, IDs=TRUE, xbnds=maxRange, ybnds=maxRange)
hexdf <- data.frame (hcell2xy (h),  hexID = h@cell, counts = h@count)
attr(hexdf, "cID") <- h@cID
p <- ggplot(hexdf, aes(x=x, y=y, fill = counts, hexID=hexID)) + geom_hex(stat="identity") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_cartesian(xlim = c(-0.5, maxRange[2]+buffer), ylim = c(-0.5, maxRange[2]+buffer))
p
dev.off()
hexdf$countColor <- Hmisc::cut2(hexdf$counts, g=6)
hexdf$countColor2 <- as.factor(unlist(lapply(as.character(hexdf$countColor), function(x) substring(strsplit(gsub(" ", "", x, fixed = TRUE), ",")[[1]][1], 2))))
hexdf$countColor2 <- as.factor(unlist(lapply(as.character(hexdf$countColor), function(x) substring(strsplit(gsub(" ", "", x, fixed = TRUE), ",")[[1]][1], 2))))
hexdf$countColor2 <- factor(hexdf$countColor2, levels = as.character(sort(as.numeric(levels(hexdf$countColor2)))))
for (i in 1:(length(levels(hexdf$countColor2))-1)){
levels(hexdf$countColor2)[i] <- paste0(levels(hexdf$countColor2)[i],"-",levels(hexdf$countColor2)[i+1])
}
levels(hexdf$countColor2)[length(levels(hexdf$countColor2))] <- paste0(levels(hexdf$countColor2)[length(levels(hexdf$countColor2))], "+")
my_breaks = levels(hexdf$countColor2)
clrs <- RColorBrewer::brewer.pal(length(my_breaks)+3, "Blues")
clrs <- clrs[3:length(clrs)]
p <- ggplot(hexdf, aes(x=x, y=y, hexID=hexID, counts=counts, fill=countColor2)) + geom_hex(stat="identity") + scale_fill_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + scale_color_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + geom_abline(intercept = 0, color = "red", size = 0.25) + labs(x = paste0("Read count ", "(", values$selPair[1], ")"), y = paste0("Read count ", "(", values$selPair[2], ")")) + coord_fixed(ratio=1)
p <- ggplot(hexdf, aes(x=x, y=y, hexID=hexID, counts=counts, fill=countColor2)) + geom_hex(stat="identity") + scale_fill_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + scale_color_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_fixed(ratio=1)
p
ggplotly(p)
my_fn <- function(data, mapping, ...){
x = data[,c(as.character(mapping$x))]
y = data[,c(as.character(mapping$y))]
h <- hexbin(x=x, y=y, xbins=xbins, shape=1, IDs=TRUE, xbnds=maxRange, ybnds=maxRange)
hexdf <- data.frame (hcell2xy (h),  hexID = h@cell, counts = h@count)
attr(hexdf, "cID") <- h@cID
# ADDED
hexdf$countColor <- Hmisc::cut2(hexdf$counts, g=6)
hexdf$countColor2 <- as.factor(unlist(lapply(as.character(hexdf$countColor), function(x) substring(strsplit(gsub(" ", "", x, fixed = TRUE), ",")[[1]][1], 2))))
hexdf$countColor2 <- factor(hexdf$countColor2, levels = as.character(sort(as.numeric(levels(hexdf$countColor2)))))
for (i in 1:(length(levels(hexdf$countColor2))-1)){
levels(hexdf$countColor2)[i] <- paste0(levels(hexdf$countColor2)[i],"-",levels(hexdf$countColor2)[i+1])
}
levels(hexdf$countColor2)[length(levels(hexdf$countColor2))] <- paste0(levels(hexdf$countColor2)[length(levels(hexdf$countColor2))], "+")
my_breaks = levels(hexdf$countColor2)
clrs <- RColorBrewer::brewer.pal(length(my_breaks)+3, "Blues")
clrs <- clrs[3:length(clrs)]
p <- ggplot(hexdf, aes(x=x, y=y, hexID=hexID, counts=counts, fill=countColor2)) + geom_hex(stat="identity") + scale_fill_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + scale_color_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_fixed(ratio=1)
# labs(x = paste0("Read count ", "(", values$selPair[1], ")"), y = paste0("Read count ", "(", values$selPair[2], ")")) +
#p <- ggplot(hexdf, aes(x=x, y=y, fill = counts, hexID=hexID)) + geom_hex(stat="identity") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_cartesian(xlim = c(-0.5, maxRange[2]+buffer), ylim = c(-0.5, maxRange[2]+buffer))
p
}
p <- ggpairs(data[,-1], lower = list(continuous = my_fn))
p
ggplotly(p)
p
p <- ggplot(hexdf, aes(x=x, y=y, hexID=hexID, counts=counts, fill=countColor2)) + geom_hex(stat="identity") + scale_fill_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + scale_color_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_fixed(ratio=1)
p
g_legend <- function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
mylegend <- g_legend(p)
mylegend
library(grid)
grid.draw(mylegend)
my_fn <- function(data, mapping, ...){
x = data[,c(as.character(mapping$x))]
y = data[,c(as.character(mapping$y))]
h <- hexbin(x=x, y=y, xbins=xbins, shape=1, IDs=TRUE, xbnds=maxRange, ybnds=maxRange)
hexdf <- data.frame (hcell2xy (h),  hexID = h@cell, counts = h@count)
attr(hexdf, "cID") <- h@cID
# ADDED
hexdf$countColor <- Hmisc::cut2(hexdf$counts, g=6)
hexdf$countColor2 <- as.factor(unlist(lapply(as.character(hexdf$countColor), function(x) substring(strsplit(gsub(" ", "", x, fixed = TRUE), ",")[[1]][1], 2))))
hexdf$countColor2 <- factor(hexdf$countColor2, levels = as.character(sort(as.numeric(levels(hexdf$countColor2)))))
for (i in 1:(length(levels(hexdf$countColor2))-1)){
levels(hexdf$countColor2)[i] <- paste0(levels(hexdf$countColor2)[i],"-",levels(hexdf$countColor2)[i+1])
}
levels(hexdf$countColor2)[length(levels(hexdf$countColor2))] <- paste0(levels(hexdf$countColor2)[length(levels(hexdf$countColor2))], "+")
my_breaks = levels(hexdf$countColor2)
clrs <- RColorBrewer::brewer.pal(length(my_breaks)+3, "Blues")
clrs <- clrs[3:length(clrs)]
p <- ggplot(hexdf, aes(x=x, y=y, hexID=hexID, counts=counts, fill=countColor2)) + geom_hex(stat="identity") + scale_fill_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + scale_color_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_fixed(ratio=1)
# labs(x = paste0("Read count ", "(", values$selPair[1], ")"), y = paste0("Read count ", "(", values$selPair[2], ")")) +
#p <- ggplot(hexdf, aes(x=x, y=y, fill = counts, hexID=hexID)) + geom_hex(stat="identity") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_cartesian(xlim = c(-0.5, maxRange[2]+buffer), ylim = c(-0.5, maxRange[2]+buffer))
p
}
p <- ggpairs(data[,-1], lower = list(continuous = my_fn))
ggplotly(p)
ls()
pS <- p
ggPS <- ggplotly(pS, width=700, height=600)
myLength <- length(ggPS[["x"]][["data"]])
for (i in 1:myLength){
item =ggPS[["x"]][["data"]][[i]]$text[1]
if (!is.null(item)){
if (!startsWith(item, "co")){
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "none"
}}
hexHover = ggPS[["x"]][["data"]][[i]]$text
if (!is.null(hexHover) && grepl("hexID", hexHover)){
ggPS[["x"]][["data"]][[i]]$text <- strsplit(hexHover, "<")[[1]][1]
ggPS[["x"]][["data"]][[i]]$t2 <- hexHover
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "text"
}
}
for(i in 2:(p$nrow)) {
for(j in 1:(p$nrow-1)) {
data[[paste(i,j,sep="-")]] <- attr(pS[i,j]$data, "cID")
}
}
ggPS
rm(list=ls())
data(soybean_cn)
soybean_cn <- soybean_cn[,1:7]
data=soybean_cn
outDir=getwd()
xbins=10
maxVal = max(abs(data[,-1]))
maxRange = c(-1*maxVal, maxVal)
buffer = 4*maxRange[2]/xbins
g_legend <- function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
my_fn <- function(data, mapping, ...){
x = data[,c(as.character(mapping$x))]
y = data[,c(as.character(mapping$y))]
h <- hexbin(x=x, y=y, xbins=xbins, shape=1, IDs=TRUE, xbnds=maxRange, ybnds=maxRange)
hexdf <- data.frame (hcell2xy (h),  hexID = h@cell, counts = h@count)
attr(hexdf, "cID") <- h@cID
# ADDED
hexdf$countColor <- Hmisc::cut2(hexdf$counts, g=6)
hexdf$countColor2 <- as.factor(unlist(lapply(as.character(hexdf$countColor), function(x) substring(strsplit(gsub(" ", "", x, fixed = TRUE), ",")[[1]][1], 2))))
hexdf$countColor2 <- factor(hexdf$countColor2, levels = as.character(sort(as.numeric(levels(hexdf$countColor2)))))
for (i in 1:(length(levels(hexdf$countColor2))-1)){
levels(hexdf$countColor2)[i] <- paste0(levels(hexdf$countColor2)[i],"-",levels(hexdf$countColor2)[i+1])
}
levels(hexdf$countColor2)[length(levels(hexdf$countColor2))] <- paste0(levels(hexdf$countColor2)[length(levels(hexdf$countColor2))], "+")
my_breaks = levels(hexdf$countColor2)
clrs <- RColorBrewer::brewer.pal(length(my_breaks)+3, "Blues")
clrs <- clrs[3:length(clrs)]
p <- ggplot(hexdf, aes(x=x, y=y, hexID=hexID, counts=counts, fill=countColor2)) + geom_hex(stat="identity") + scale_fill_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + scale_color_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_fixed(ratio=1)
p
}
p <- ggpairs(data[,-1], lower = list(continuous = my_fn))
pS <- p
ggPS <- ggplotly(pS, width=700, height=600)
ggPS
myLength <- length(ggPS[["x"]][["data"]])
for (i in 1:myLength){
item =ggPS[["x"]][["data"]][[i]]$text[1]
if (!is.null(item)){
if (!startsWith(item, "co")){
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "none"
}}
hexHover = ggPS[["x"]][["data"]][[i]]$text
if (!is.null(hexHover) && grepl("hexID", hexHover)){
ggPS[["x"]][["data"]][[i]]$text <- strsplit(hexHover, "<")[[1]][1]
ggPS[["x"]][["data"]][[i]]$t2 <- hexHover
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "text"
}
}
ggPS
ggPS <- ggplotly(pS, width=700, height=600)
myLength <- length(ggPS[["x"]][["data"]])
for (i in 1:myLength){
item =ggPS[["x"]][["data"]][[i]]$text[1]
if (!is.null(item)){
if (!startsWith(item, "co")){
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "none"
}}
hexHover = ggPS[["x"]][["data"]][[i]]$text
if (!is.null(hexHover) && grepl("hexID", hexHover)){
ggPS[["x"]][["data"]][[i]]$text <- strsplit(hexHover, "<")[[1]][2] #chnaged 1 to 2
ggPS[["x"]][["data"]][[i]]$t2 <- hexHover
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "text"
}
}
ggPS
strsplit(hexHover, "<")[[1]][2]
ggPS <- ggplotly(pS, width=700, height=600)
myLength <- length(ggPS[["x"]][["data"]])
i=1
item =ggPS[["x"]][["data"]][[i]]$text[1]
if (!is.null(item)){
if (!startsWith(item, "co")){
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "none"
}}
hexHover = ggPS[["x"]][["data"]][[i]]$text
!is.null(hexHover) && grepl("hexID", hexHover)
i=2
item =ggPS[["x"]][["data"]][[i]]$text[1]
if (!is.null(item)){
if (!startsWith(item, "co")){
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "none"
}}
hexHover = ggPS[["x"]][["data"]][[i]]$text
!is.null(hexHover) && grepl("hexID", hexHover)
strsplit(hexHover, "<")[[1]][2]
temp <- strsplit(hexHover, "<")[[1]][2]
temp
strsplit(temp, ">")
strsplit(temp, ">")[[1]][2]
temp2 <- strsplit(temp, ">")[[1]][2]
temp2
str_replace(gsub("\\s+", " ", str_trim(temp2)), "B", "b")
library(stringr)
str_replace(gsub("\\s+", " ", str_trim(temp2)), "B", "b")
dev.off()
dev.off()
rm(list=ls())
data(soybean_cn)
soybean_cn <- soybean_cn[,1:7]
data=soybean_cn
outDir=getwd()
xbins=10
maxVal = max(abs(data[,-1]))
maxRange = c(-1*maxVal, maxVal)
buffer = 4*maxRange[2]/xbins
my_fn <- function(data, mapping, ...){
x = data[,c(as.character(mapping$x))]
y = data[,c(as.character(mapping$y))]
h <- hexbin(x=x, y=y, xbins=xbins, shape=1, IDs=TRUE, xbnds=maxRange, ybnds=maxRange)
hexdf <- data.frame (hcell2xy (h),  hexID = h@cell, counts = h@count)
attr(hexdf, "cID") <- h@cID
# ADDED
hexdf$countColor <- Hmisc::cut2(hexdf$counts, g=6)
hexdf$countColor2 <- as.factor(unlist(lapply(as.character(hexdf$countColor), function(x) substring(strsplit(gsub(" ", "", x, fixed = TRUE), ",")[[1]][1], 2))))
hexdf$countColor2 <- factor(hexdf$countColor2, levels = as.character(sort(as.numeric(levels(hexdf$countColor2)))))
for (i in 1:(length(levels(hexdf$countColor2))-1)){
levels(hexdf$countColor2)[i] <- paste0(levels(hexdf$countColor2)[i],"-",levels(hexdf$countColor2)[i+1])
}
levels(hexdf$countColor2)[length(levels(hexdf$countColor2))] <- paste0(levels(hexdf$countColor2)[length(levels(hexdf$countColor2))], "+")
my_breaks = levels(hexdf$countColor2)
clrs <- RColorBrewer::brewer.pal(length(my_breaks)+3, "Blues")
clrs <- clrs[3:length(clrs)]
p <- ggplot(hexdf, aes(x=x, y=y, hexID=hexID, counts=counts, fill=countColor2)) + geom_hex(stat="identity") + scale_fill_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + scale_color_manual(labels = as.character(my_breaks), values = rev(clrs), name = "Cases count") + geom_abline(intercept = 0, color = "red", size = 0.25) + coord_fixed(ratio=1)
p
}
p <- ggpairs(data[,-1], lower = list(continuous = my_fn))
pS <- p
ggPS <- ggplotly(pS, width=700, height=600)
myLength <- length(ggPS[["x"]][["data"]])
for (i in 1:myLength){
item =ggPS[["x"]][["data"]][[i]]$text[1]
if (!is.null(item)){
if (!startsWith(item, "co")){
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "none"
}}
hexHover = ggPS[["x"]][["data"]][[i]]$text
if (!is.null(hexHover) && grepl("hexID", hexHover)){
temp <- strsplit(hexHover, "<")[[1]][2]
temp2 <- strsplit(temp, ">")[[1]][2]
temp3 <- str_replace(gsub("\\s+", " ", str_trim(temp2)), "B", "b")
ggPS[["x"]][["data"]][[i]]$text <- temp3
ggPS[["x"]][["data"]][[i]]$t2 <- hexHover
ggPS[["x"]][["data"]][[i]]$hoverinfo <- "text"
}
}
ggPS
dev.off()
dev.off()
shiny::runApp('JDSPaper/Dashboards/scatmat')
runApp('JDSPaper/Dashboards/scatmat')
runApp('JDSPaper/Dashboards/scatmat')
runApp('JDSPaper/Dashboards/scatmat')
runApp('JDSPaper/Dashboards/scatmat')
runApp('JDSPaper/Dashboards/scatmat')
runApp('JDSPaper/Dashboards/scatmat')
set.seed(3)
f = function(){1.3*rnorm(1000)}
pcpDat = data.frame(ID = paste0("ID", 1:1000), A=f(), B=f(), C=f(), D=f(), E=f(), F=f())
pcpDat$ID = as.character(pcpDat$ID)
library(shiny); runApp('Desktop/CarsonPlotly/pcpDelete.R')
library(plotly)
runApp('Desktop/CarsonPlotly/pcpDelete.R')
runApp('Desktop/CarsonPlotly/pcpDelete.R')
set.seed(3)
f = function(){1.3*rnorm(8000)}
pcpDat = data.frame(ID = paste0("ID", 1:8000), A=f(), B=f(), C=f(), D=f(), E=f(), F=f())
pcpDat$ID = as.character(pcpDat$ID)
runApp('Desktop/CarsonPlotly/pcpDelete.R')
runApp('Desktop/CarsonPlotly/pcpDelete.R')
set.seed(3)
f = function(){1.3*rnorm(4000)}
pcpDat = data.frame(ID = paste0("ID", 1:4000), A=f(), B=f(), C=f(), D=f(), E=f(), F=f())
pcpDat$ID = as.character(pcpDat$ID)
runApp('Desktop/CarsonPlotly/pcpDelete.R')
runApp('Desktop/CarsonPlotly/pcpDelete.R')
runApp('Desktop/CarsonPlotly/pcpDelete.R')
pm <- tidyr::gather(pcpDat, variable, value, -ID)
str(pm)
runApp('Desktop/CarsonPlotly/pcpDelete.R')
runApp('Desktop/CarsonPlotly/pcpDelete.R')
runApp('Desktop/CarsonPlotly/pcpDelete.R')
runApp('Desktop/CarsonPlotly/pcpDelete.R')
library(shiny); runApp('ViRGo/Visuals.R')
sessionInfo()
runApp('ViRGo/Visuals.R')
runApp('ViRGo/Visuals.R')
runApp('ViRGo/Visuals.R')
data <- readRDS("m1_sub.Rds")
setwd("~/ViRGo")
data <- readRDS("m1_sub.Rds")
colnames(data)
summary(data$Organism)
summary(data$Cell)
runApp('Visuals.R')
runApp('Visuals.R')
??renderPrint
summary(data$Cell)
??textVerbatimOutput
runApp('Visuals.R')
runApp('tests/testSummaryOutput.R')
runApp('tests/testSummaryOutput.R')
setwd("~/ViRGo")
runApp('tests/testSummaryOutput.R')
runApp('tests/testSummaryOutput.R')
runApp('tests/testSummaryOutput.R')
setwd("~/ViRGo")
runApp('tests/testSummaryOutput.R')
getwd()
setwd("~/ViRGo")
runApp('tests/testSummaryOutput.R')
getwd()
data <- readRDS("m1_sub.Rds")
runApp('tests/testSummaryOutput.R')
runApp('tests/testSummaryOutput.R')
summary(data$Cell)
print(summary(data$Cell))
runApp('tests/testSummaryOutput.R')
LETTERS
rand(LETTERS,100)
random(LETTERS,100)
sample(LETTERS, 200, replace=TRUE)
sample(1:1000, 200, replace=TRUE)
runApp('tests/testSummaryOutput.R')
runApp('tests/testSummaryOutput.R')
